//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""c6c4b1c2-981d-400e-b676-ab3d422e28a2"",
            ""actions"": [
                {
                    ""name"": ""MovePlayer"",
                    ""type"": ""Value"",
                    ""id"": ""3a7b51fa-ce9a-4546-8e2e-0aa46731aa2e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ControllerAButton"",
                    ""type"": ""Button"",
                    ""id"": ""87a4a409-9571-47c9-a23c-9c0f4fac9396"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ControllerBButton"",
                    ""type"": ""Button"",
                    ""id"": ""6cc656bd-04a1-498e-8b9d-f2caea80d983"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ControllerXButton"",
                    ""type"": ""Button"",
                    ""id"": ""b9fc565f-af43-4d60-9d59-4f29afd2f7f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ControllerYButton"",
                    ""type"": ""Button"",
                    ""id"": ""c8d1dba4-e112-4431-8118-24a2e0a4c7bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6849cc5a-4e20-4b0e-aaca-7dfac24daa59"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""MoveByKeyboard"",
                    ""id"": ""e1f3c2e8-1097-49c6-aa2a-008b7f2d299c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""241faa28-f04e-490c-849a-90a001445f4c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d81cefde-6e2a-40ce-9587-f66df7fb6f78"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""451fe284-a484-4702-8510-b9d1f8caed21"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""90ccb618-504a-4418-af52-18eb4ed974d4"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""MoveByWASD"",
                    ""id"": ""fffe57d3-c430-46a1-91e5-07491dd8c710"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""249108bb-b4d0-496d-be4a-ac60914c32be"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bb19f289-9fcf-4fe5-8635-fbb18705992b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e02babf5-a8e5-4df2-9a97-5869851604c9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e142af1b-6c23-413a-a00b-aba2895f8f0b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""58be8b58-88a5-4286-8c3f-7113b9d8dbdb"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControllerAButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b91a078f-fc89-40e3-9568-a49f29df3498"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControllerBButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0329461-459d-45cc-baf6-74eb98082a93"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControllerXButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5003fea3-3db5-45ca-ae27-82d35366ff91"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControllerYButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_MovePlayer = m_Player.FindAction("MovePlayer", throwIfNotFound: true);
        m_Player_ControllerAButton = m_Player.FindAction("ControllerAButton", throwIfNotFound: true);
        m_Player_ControllerBButton = m_Player.FindAction("ControllerBButton", throwIfNotFound: true);
        m_Player_ControllerXButton = m_Player.FindAction("ControllerXButton", throwIfNotFound: true);
        m_Player_ControllerYButton = m_Player.FindAction("ControllerYButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_MovePlayer;
    private readonly InputAction m_Player_ControllerAButton;
    private readonly InputAction m_Player_ControllerBButton;
    private readonly InputAction m_Player_ControllerXButton;
    private readonly InputAction m_Player_ControllerYButton;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovePlayer => m_Wrapper.m_Player_MovePlayer;
        public InputAction @ControllerAButton => m_Wrapper.m_Player_ControllerAButton;
        public InputAction @ControllerBButton => m_Wrapper.m_Player_ControllerBButton;
        public InputAction @ControllerXButton => m_Wrapper.m_Player_ControllerXButton;
        public InputAction @ControllerYButton => m_Wrapper.m_Player_ControllerYButton;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @MovePlayer.started += instance.OnMovePlayer;
            @MovePlayer.performed += instance.OnMovePlayer;
            @MovePlayer.canceled += instance.OnMovePlayer;
            @ControllerAButton.started += instance.OnControllerAButton;
            @ControllerAButton.performed += instance.OnControllerAButton;
            @ControllerAButton.canceled += instance.OnControllerAButton;
            @ControllerBButton.started += instance.OnControllerBButton;
            @ControllerBButton.performed += instance.OnControllerBButton;
            @ControllerBButton.canceled += instance.OnControllerBButton;
            @ControllerXButton.started += instance.OnControllerXButton;
            @ControllerXButton.performed += instance.OnControllerXButton;
            @ControllerXButton.canceled += instance.OnControllerXButton;
            @ControllerYButton.started += instance.OnControllerYButton;
            @ControllerYButton.performed += instance.OnControllerYButton;
            @ControllerYButton.canceled += instance.OnControllerYButton;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @MovePlayer.started -= instance.OnMovePlayer;
            @MovePlayer.performed -= instance.OnMovePlayer;
            @MovePlayer.canceled -= instance.OnMovePlayer;
            @ControllerAButton.started -= instance.OnControllerAButton;
            @ControllerAButton.performed -= instance.OnControllerAButton;
            @ControllerAButton.canceled -= instance.OnControllerAButton;
            @ControllerBButton.started -= instance.OnControllerBButton;
            @ControllerBButton.performed -= instance.OnControllerBButton;
            @ControllerBButton.canceled -= instance.OnControllerBButton;
            @ControllerXButton.started -= instance.OnControllerXButton;
            @ControllerXButton.performed -= instance.OnControllerXButton;
            @ControllerXButton.canceled -= instance.OnControllerXButton;
            @ControllerYButton.started -= instance.OnControllerYButton;
            @ControllerYButton.performed -= instance.OnControllerYButton;
            @ControllerYButton.canceled -= instance.OnControllerYButton;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMovePlayer(InputAction.CallbackContext context);
        void OnControllerAButton(InputAction.CallbackContext context);
        void OnControllerBButton(InputAction.CallbackContext context);
        void OnControllerXButton(InputAction.CallbackContext context);
        void OnControllerYButton(InputAction.CallbackContext context);
    }
}
